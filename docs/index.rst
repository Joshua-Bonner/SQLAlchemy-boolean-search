.. SQLAlchemy-boolean-search documentation master file, created by
   sphinx-quickstart on Wed Aug  5 19:14:24 2015.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

SQLAlchemy-boolean-search
========
SQLAlchemy-boolean-search is a python module that translates a boolean search expression
into its corresponding SQLAlchemy filter.

Boolean search expressions
--------
A boolean search expression looks something like this::

    field1=*something* and not (field2==1 or field3<=10.0)

It accepts one or more search criteria along with the boolean operands 'not', 'and', and 'or'.

Order of precedence
--------
The boolean operands have the following order of precedence:

1. not
2. and
3. or

So the following expression::

    a=1 or not b=2 and c=3

will be interpreted as::

    a=1 or ((not b=2) and c=3)

Search criteria
--------
A search criteria must be in the form of: 'name' 'operator' 'value'.

* 'name' must match an existing element field name.

* 'operator' must be one of: '<', '<=', '=', '==', '!=', '>=' or '>'.

* 'value' is an alphanumeric string. If the value contains spaces it must be enclosed by quotes. For example: "string with spaces".

For element field types that map to a float or an integer, a number comparison will be performed. That is: 11 > 2.

For other element field types, a string comparison will be performed. That is: "11" < "2". All string comparisons are case INsensitive.

Wildcard values
--------
| The expression 'name==a' performs an **exact match** (notice the double equal signs).
| It matches 'a' but not 'Xa', 'XaX' or 'aX'.

| The expression 'name=a' returns elements whose name **contains** the value 'a'.
| It matches 'a', 'A', 'Xa', 'aX' and 'XaX'.

| You can specify the wildcard character '*' to perform 'starts-with' and 'ends-with' searches like so:
| 'name=a*' matches 'a' and 'aX' but not 'Xa'.
| 'name=*a' matches 'a' and 'Xa' but not 'aX'.

Note that 'name=a' is shorthand for 'name=*a*'.

Example
--------
::

    from sqlalchemy_boolean_search import parse_boolean_search
    
    ...
    
    # Define a data model
    # This example uses Flask-SQLAlchemy but regular SQLAlchemy can be used as well
    class Record(db.Model):
        __tablename__ = 'records'
        id = db.Column(db.Integer, primary_key=True)
        field1 = db.Column(db.String(255), nullable=False, server_default='')
        field2 = db.Column(db.Integer(255), nullable=False, server_default='0')
        field3 = db.Column(db.Float(), nullable=False, server_default='0.0')
    
    ...
    
    # Parse a boolean search into a parsed search expression
    boolean_search = 'field1=*something* and not (field2==1 or field3<=10.0)'
    parsed_expression = parse_boolean_search(boolean_search)
    
    # Query the records using a filter generated by the parsed expression
    records = Record.query.filter(parsed_expression.filter(Record).all()
    
    # Do something with the result
    for record in records:
        pass

TODOs
-------
Proper exception handling with useful information.